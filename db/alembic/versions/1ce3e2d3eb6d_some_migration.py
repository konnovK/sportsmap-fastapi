"""some migration

Revision ID: 1ce3e2d3eb6d
Revises: 
Create Date: 2023-04-16 13:20:49.446546

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '1ce3e2d3eb6d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('facility_age',
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk__facility_age'))
    )
    op.create_table('facility_covering_type',
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk__facility_covering_type'))
    )
    op.create_table('facility_owning_type',
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk__facility_owning_type'))
    )
    op.create_table('facility_paying_type',
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk__facility_paying_type'))
    )
    op.create_table('facility_photo',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__facility_photo')),
    sa.UniqueConstraint('url', name=op.f('uq__facility_photo__url'))
    )
    op.create_table('facility_type',
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk__facility_type'))
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('admin', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__users')),
    sa.UniqueConstraint('email', name=op.f('uq__users__email'))
    )
    op.create_table('facility',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('x', sa.Float(), nullable=True),
    sa.Column('y', sa.Float(), nullable=True),
    sa.Column('hidden', sa.Boolean(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=False),
    sa.Column('owner', sa.String(), nullable=False),
    sa.Column('length', sa.Float(), nullable=True),
    sa.Column('width', sa.Float(), nullable=True),
    sa.Column('height', sa.Float(), nullable=True),
    sa.Column('depth', sa.Float(), nullable=True),
    sa.Column('area', sa.Float(), nullable=False),
    sa.Column('eps', sa.Integer(), nullable=True),
    sa.Column('actual_workload', sa.Integer(), nullable=True),
    sa.Column('annual_capacity', sa.Integer(), nullable=True),
    sa.Column('accessibility', sa.Boolean(), nullable=False),
    sa.Column('site', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('document', sa.String(), nullable=True),
    sa.Column('note', sa.String(), nullable=True),
    sa.Column('working_hours', sa.JSON(), nullable=True),
    sa.Column('type_name', sa.String(), nullable=False),
    sa.Column('owning_type_name', sa.String(), nullable=True),
    sa.Column('covering_type_name', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['covering_type_name'], ['facility_covering_type.name'], name=op.f('fk__facility__covering_type_name__facility_covering_type')),
    sa.ForeignKeyConstraint(['owning_type_name'], ['facility_owning_type.name'], name=op.f('fk__facility__owning_type_name__facility_owning_type')),
    sa.ForeignKeyConstraint(['type_name'], ['facility_type.name'], name=op.f('fk__facility__type_name__facility_type')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk__facility')),
    sa.UniqueConstraint('name', 'address', 'owner', 'area', 'type_name', name=op.f('uq__facility__name_address_owner_area_type_name'))
    )
    op.create_index('ix__facility__address', 'facility', ['address'], unique=False, postgresql_using='hash')
    op.create_index('ix__facility__id', 'facility', ['id'], unique=False, postgresql_using='hash')
    op.create_index('ix__facility__name', 'facility', ['name'], unique=False, postgresql_using='hash')
    op.create_index('ix__facility__owner', 'facility', ['owner'], unique=False, postgresql_using='hash')
    op.create_index('ix__facility__x', 'facility', ['x'], unique=False, postgresql_using='btree')
    op.create_index('ix__facility__y', 'facility', ['y'], unique=False, postgresql_using='btree')
    op.create_table('facility_facility_age_association_table',
    sa.Column('facility', sa.UUID(), nullable=True),
    sa.Column('facility_age', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['facility'], ['facility.id'], name=op.f('fk__facility_facility_age_association_table__facility__facility')),
    sa.ForeignKeyConstraint(['facility_age'], ['facility_age.name'], name=op.f('fk__facility_facility_age_association_table__facility_age__facility_age'))
    )
    op.create_table('facility_facility_paying_type_association_table',
    sa.Column('facility', sa.UUID(), nullable=True),
    sa.Column('facility_paying_type', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['facility'], ['facility.id'], name=op.f('fk__facility_facility_paying_type_association_table__facility__facility')),
    sa.ForeignKeyConstraint(['facility_paying_type'], ['facility_paying_type.name'], name=op.f('fk__facility_facility_paying_type_association_table__facility_paying_type__facility_paying_type'))
    )
    op.create_table('facility_facility_photo_association_table',
    sa.Column('facility', sa.UUID(), nullable=True),
    sa.Column('facility_photo', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['facility'], ['facility.id'], name=op.f('fk__facility_facility_photo_association_table__facility__facility')),
    sa.ForeignKeyConstraint(['facility_photo'], ['facility_photo.id'], name=op.f('fk__facility_facility_photo_association_table__facility_photo__facility_photo'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('facility_facility_photo_association_table')
    op.drop_table('facility_facility_paying_type_association_table')
    op.drop_table('facility_facility_age_association_table')
    op.drop_index('ix__facility__y', table_name='facility', postgresql_using='btree')
    op.drop_index('ix__facility__x', table_name='facility', postgresql_using='btree')
    op.drop_index('ix__facility__owner', table_name='facility', postgresql_using='hash')
    op.drop_index('ix__facility__name', table_name='facility', postgresql_using='hash')
    op.drop_index('ix__facility__id', table_name='facility', postgresql_using='hash')
    op.drop_index('ix__facility__address', table_name='facility', postgresql_using='hash')
    op.drop_table('facility')
    op.drop_table('users')
    op.drop_table('facility_type')
    op.drop_table('facility_photo')
    op.drop_table('facility_paying_type')
    op.drop_table('facility_owning_type')
    op.drop_table('facility_covering_type')
    op.drop_table('facility_age')
    # ### end Alembic commands ###
